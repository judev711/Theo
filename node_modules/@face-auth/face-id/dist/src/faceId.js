"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaceId = void 0;
const constants_1 = require("./constants");
const response_1 = require("./response");
class FaceId {
    _domain;
    _auth;
    _authPromise;
    constructor(domain, clientToken) {
        this._auth = null;
        this._domain = domain;
        this._authPromise = this.authorize(domain, clientToken)
            .then(value => {
            this._auth = value.success && !!value.data ? value.data : null;
            return value;
        });
    }
    async authorize(domain, clientToken) {
        let url = `${constants_1.API.HOST}${constants_1.API.PATH}${constants_1.API.VERSION}${constants_1.Endpoints.AUTHORIZE}`;
        const options = {
            method: 'POST',
            headers: {
                [constants_1.HttpHeaders.CONTENT_TYPE_HEADER_NAME]: constants_1.HttpHeaders.CONTENT_TYPE_HEADER_VALUE,
                [constants_1.FaceAuthHeaders.DOMAIN]: domain,
                [constants_1.FaceAuthHeaders.CLIENT_TOKEN]: clientToken
            }
        };
        return await fetch(url, options)
            .then(async (response) => await this.handleResponse(response))
            .catch(error => this.handleError(error));
    }
    async register(faceId, image, imageType) {
        await this._authPromise;
        if (this.isAuth()) {
            return this.unauthorized();
        }
        const file = new File([image], 'image.ext', { type: imageType });
        const formdata = new FormData();
        formdata.append('file', file);
        let url = `${constants_1.API.HOST}${constants_1.API.PATH}${constants_1.API.VERSION}${constants_1.Endpoints.REGISTER}/${faceId}`;
        const options = {
            method: 'POST',
            headers: {
                [constants_1.FaceAuthHeaders.DOMAIN]: this._domain,
                [constants_1.FaceAuthHeaders.TOKEN]: this._auth.token
            },
            body: formdata,
        };
        return await fetch(url, options)
            .then(async (response) => await this.handleResponse(response))
            .catch(error => this.handleError(error));
    }
    async identify(image, imageType) {
        await this._authPromise;
        if (this.isAuth()) {
            return this.unauthorized();
        }
        const file = new File([image], 'image.extension', { type: imageType });
        const formdata = new FormData();
        formdata.append('file', file);
        let url = `${constants_1.API.HOST}${constants_1.API.PATH}${constants_1.API.VERSION}${constants_1.Endpoints.IDENTIFY}`;
        const options = {
            method: 'POST',
            headers: {
                [constants_1.FaceAuthHeaders.DOMAIN]: this._domain,
                [constants_1.FaceAuthHeaders.TOKEN]: this._auth.token
            },
            body: formdata,
        };
        return await fetch(url, options)
            .then(async (response) => await this.handleResponse(response))
            .catch(error => this.handleError(error));
    }
    async unregister(faceId) {
        await this._authPromise;
        if (this.isAuth()) {
            return this.unauthorized();
        }
        let url = `${constants_1.API.HOST}${constants_1.API.PATH}${constants_1.API.VERSION}${constants_1.Endpoints.UNREGISTER}/${faceId}`;
        const options = {
            method: 'DELETE',
            headers: {
                [constants_1.FaceAuthHeaders.DOMAIN]: this._domain,
                [constants_1.FaceAuthHeaders.TOKEN]: this._auth.token
            }
        };
        return await fetch(url, options)
            .then(async (response) => await this.handleResponse(response))
            .catch(error => this.handleError(error));
    }
    async handleResponse(response) {
        const res = await response.json();
        if (response.status === 401) {
            return {
                success: false,
                error: {
                    code: response_1.ErrorCode.UNAUTHORIZED
                }
            };
        }
        else if (response.status >= 200 && response.status < 300) {
            return {
                success: true,
                data: res
            };
        }
        else {
            return {
                success: false,
                error: res
            };
        }
    }
    async handleError(error) {
        return {
            success: false,
            error: {
                code: response_1.ErrorCode.UNHANDLED_ERROR
            }
        };
    }
    unauthorized() {
        return {
            success: false,
            error: {
                code: response_1.ErrorCode.UNAUTHORIZED
            }
        };
    }
    isAuth() {
        return !this._auth?.token;
    }
}
exports.FaceId = FaceId;
